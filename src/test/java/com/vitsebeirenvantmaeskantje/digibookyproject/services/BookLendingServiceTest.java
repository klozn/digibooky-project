package com.vitsebeirenvantmaeskantje.digibookyproject.services;

import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.booklendings.BookLendingDto;
import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.booklendings.CreateBookLendingDto;
import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.books.BookDto;
import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.mappers.BookDtoMapper;
import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.mappers.BookLendingMapper;
import com.vitsebeirenvantmaeskantje.digibookyproject.api.dto.mappers.UserMapper;
import com.vitsebeirenvantmaeskantje.digibookyproject.domain.BookLending;
import com.vitsebeirenvantmaeskantje.digibookyproject.domain.exceptions.UserNotFoundException;
import com.vitsebeirenvantmaeskantje.digibookyproject.repositories.BookLendingRepository;
import com.vitsebeirenvantmaeskantje.digibookyproject.repositories.BookRepository;
import com.vitsebeirenvantmaeskantje.digibookyproject.repositories.UserRepository;
import org.junit.jupiter.api.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


import static org.junit.jupiter.api.Assertions.assertThrows;

class BookLendingServiceTest {

    private final static String LIBRARIAN_ID = "2";
    private static final String ISBN_ONE = BookRepository.ISBN_ONE;
    private static final String ISBN_TWO = BookRepository.ISBN_TWO;
    private static final String ISBN_THREE = BookRepository.ISBN_THREE;

    private BookLendingService bookLendingService;
    private BookLendingRepository bookLendingRepository;
    private BookService bookService;

    private CreateBookLendingDto validDTO;
    private CreateBookLendingDto invalidISBNDTO;
    private CreateBookLendingDto invalidMemberIdDTO;


    @BeforeEach
    void setup() {
        bookLendingRepository = new BookLendingRepository();
        bookService = new BookService(new BookDtoMapper(), new BookRepository(),
                new UserService(new UserRepository(), new UserMapper()));
        bookLendingService = new BookLendingService(new BookLendingMapper(),
                bookLendingRepository, new UserService(new UserRepository(), new UserMapper()),bookService
                );

        validDTO = new CreateBookLendingDto(ISBN_ONE, "1");
        invalidISBNDTO = new CreateBookLendingDto("111", "1");
        invalidMemberIdDTO = new CreateBookLendingDto(ISBN_ONE, "10000");
    }


    @DisplayName("Valid book lending has auto generated ID")
    @Test
    void whenSavingBookLendingWithValidISBNAndMemberID_ThenBookLendingHasAutoGeneratedId() {
        //WHEN
        BookLendingDto lentBook = bookLendingService.save(validDTO);

        //THEN
        Assertions.assertNotNull(lentBook.getId());
    }


    @DisplayName("Valid book lending has return date now plus 21 days")
    @Test
    void whenSavingBookLendingWithValidISBNAndMemberID_ThenBookLendingHasCorrectReturnDate() {
        //WHEN
        BookLendingDto lentBook = bookLendingService.save(validDTO);

        int returnAfterNumberOfDays = 21;
        LocalDate expectedReturnDate = LocalDate.now().plusDays(returnAfterNumberOfDays);

        //THEN
        Assertions.assertEquals(expectedReturnDate, lentBook.getReturnDate());
    }

    @DisplayName("Valid book lending has correct ISBN")
    @Test
    void whenSavingBookLendingWithValidISBNAndMemberID_ThenBookLendingHasCorrectISBN() {
        //WHEN
        BookLendingDto lentBook = bookLendingService.save(validDTO);

        //THEN
        Assertions.assertEquals(ISBN_ONE, lentBook.getIsbn());
    }

    @DisplayName("Double lending is not possible")
    @Test
    void whenSavingValidBookLendingThatIsNotLendable_ThenExceptionIsThrown() {
        //WHEN
        bookLendingService.save(validDTO);

        //THEN
        assertThrows(IllegalArgumentException.class, () -> bookLendingService.save(validDTO));

    }

    @DisplayName("Book lending with invalid ISBN throws exception")
    @Test
    void whenSavingBookLendingWithInValidISBN_ThenExceptionIsThrown() {

        assertThrows(IllegalArgumentException.class, () -> bookLendingService.save(invalidISBNDTO));
    }


    @DisplayName("Book lending with invalid Member ID throws exception")
    @Test
    void whenSavingBookLendingWithInValidMemberID_ThenExceptionIsThrown() {

        assertThrows(UserNotFoundException.class, () -> bookLendingService.save(invalidMemberIdDTO));
    }

    @DisplayName("get lent books by memberId returns all non returned books lent to that member")
    @Test
    void getLentBooksByMemberId_whenUserIsLibrarian_returnsAllNonReturnedBooksLentToThatMember() {
        bookLendingService.save(new CreateBookLendingDto(ISBN_ONE, "3"));
        List<BookDto> books = bookLendingService.getLentBooksByMemberId("3", "2");

        Assertions.assertEquals(ISBN_ONE, books.get(0).getIsbn());
    }

    @Nested
    @DisplayName("Returning a book")
    class ReturningABook {

        @DisplayName("Member returns a book that is not overdue")
        @Test
        void whenReturningABookThatIsNotOverdue_ThenItIsAlright() {
            //GIVEN
            BookLendingDto lentBook = bookLendingService.save(validDTO);
            LocalDate lastReturningDate = lentBook.getReturnDate();

            //WHEN
            bookLendingService.returnBook(lentBook.getId());
            //THEN
            Assertions.assertTrue(lastReturningDate.isAfter(LocalDate.now()));
            Assertions.assertFalse(bookService.isBookLent(lentBook.getIsbn()));
        }


        @DisplayName("Member gives wrong lending id.")
        @Test
        void whenMemberDeliversAWrongLendingID_ThenThrowAnException() {
            //GIVEN
            BookLendingDto lentBook = bookLendingService.save(validDTO);
            String lendingId = "test";
            LocalDate localDate = LocalDate.now();
            LocalDate lastReturningDate = lentBook.getReturnDate();
            String isbnReturnedBook = lentBook.getIsbn();
            BookService bookService = new BookService(new BookDtoMapper(), new BookRepository(),
                    new UserService(new UserRepository(), new UserMapper()));

            //THEN
            assertThrows(IllegalArgumentException.class, () -> bookLendingService.returnBook(lendingId));
        }
    }

    @Nested
    @DisplayName("Overdue Books")
    class OverdueBooks {

        @DisplayName("librarian get list of overdue books")
        @Test
        void whenLibrarianAskForListOfOverdueBooks_ThenHeGetsAListOfOverdueBooks() {

            //GIVEN
            BookLending lentBook = new BookLending(ISBN_ONE,"1",LocalDate.of(2020,10,10));
            BookLending lentBook2 = new BookLending(ISBN_TWO,"1");
            BookLending lentBook3 = new BookLending(ISBN_THREE,"1");

            bookLendingRepository.save(lentBook);
            bookLendingRepository.save(lentBook2);
            bookLendingRepository.save(lentBook3);


            //WHEN
            List<BookDto> lentBooks = bookLendingService.getLentBooksByMemberId("1",LIBRARIAN_ID);
            List<BookDto> overdueBooks = bookLendingService.getOverdueBooks(LIBRARIAN_ID);
            //THEN
            Assertions.assertEquals(3,lentBooks.size());
            Assertions.assertEquals(1, overdueBooks.size());
            Assertions.assertEquals(overdueBooks.get(0), bookService.getByIsbn(lentBook.getIsbn()));

        }
    }

}
